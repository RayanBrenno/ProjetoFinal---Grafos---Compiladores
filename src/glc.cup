import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import Classes.Digrafo;
import Classes.Grafo;

parser code {: 

    public Map<String, Set<String>> grafo = new HashMap<>();
    public Map<String, Set<String>> digrafo = new HashMap<>();
    String type;
    public boolean deveImprimir = false;

    public void syntax_error(Symbol s){     
        this.defineError(s.left, s.right);    
    } 
 
    public void defineError(int line, int column, String text) { 
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(line, column, text); 
    } 
 
    public void defineError(int linha, int coluna) {    
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(linha, coluna); 
    } 
 
    public void defineError(String text) { 
        Yylex scanner = (Yylex) this.getScanner(); 
        scanner.defineError(text); 
    }

:};


terminal GRAPH, colon, line, arrow, directed, undirected, print, vertex, edge; 
terminal String ID,adjacency;
non terminal S, T, V1, V2, F;
start with S;

S ::= GRAPH colon T;

T ::= directed V1 F
    {: 
        type = "digrafo";
    :}
    | undirected V2 F
    {: 
        type = "grafo";
    :}
    |;

V1 ::= V1 vertex ID:id 
    {: 
        if (Digrafo.existeVertice(id, digrafo)) {
            defineError(idleft, idright, "Vertice duplicado: " + id);
            System.out.println("directed - vertex - if - naoAdicionarVertice " + id);
        } else {
            Digrafo.adicionarVertice(id, digrafo);
            System.out.println("directed - vertex - else - adicionarVertice " + id );
        }
    :}
    | V1 edge ID:origem arrow ID:destino
    {: 
        if (!Digrafo.existeVertice(origem, digrafo) || !Digrafo.existeVertice(destino, digrafo)) {
            defineError(origemleft, origemright, "Tentativa de criar aresta com vértice inexistente: " + origem + " -> " + destino);
            System.out.println("directed - edge - if - naoExisteUmvertice");
        } else if (Digrafo.existeAresta(origem, destino, digrafo)) {
            defineError(origemleft, origemright, "Aresta duplicada: " + origem + " -> " + destino);
            System.out.println("directed - edge - else if - arestaDuplicada "+origem + " -> " + destino);
        } else {
            Digrafo.adicionarAresta(origem, destino, digrafo);
            System.out.println("directed - edge - else - adicionarAresta "+origem + " -> " + destino);
        }
    :}
    |;

V2 ::= V2 vertex ID:id 
    {: 
        if (Grafo.existeVertice(id, grafo)) {
            defineError(idleft, idright, "Vértice duplicado: " + id);
            System.out.println("undirected - vertex - if - naoAdicionarVertice " + id);
        } else {
            Grafo.adicionarVertice(id, grafo);
            System.out.println("undirected - vertex - adicionarVertice " + id);
        };
    :}
    | V2 edge ID:origem line ID:destino
    {: 
        if (!Grafo.existeVertice(origem, grafo) || !Grafo.existeVertice(destino, grafo)) {
            defineError(origemleft, origemright, "Tentativa de criar aresta com vértice inexistente: " + origem + " -- " + destino);
            System.out.println("undirected - edge - if - naoExisteUmvertice");
        } else if (Grafo.existeAresta(origem, destino, grafo)) {
            defineError(origemleft, origemright, "Aresta duplicada: " + origem + " -- " + destino);
            System.out.println("undirected - edge - else if - arestaDuplicada "+origem + " -- " + destino);
        } else {
            Grafo.adicionarAresta(origem, destino, grafo);
            System.out.println("undirected - edge - else - adicionarAresta "+origem + " -- " + destino);
        }
    :}
    |;

F ::= print adjacency
    {: 
        deveImprimir = true;
    :}
    | error:n
    {: 
        parser.defineError(nleft, nright, "Sintaxe inválida!"); 
    :}
    |;